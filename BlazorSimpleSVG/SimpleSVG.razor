@using System.Collections.Concurrent
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime

@if (Objects != null && Context != null && module != null)
{
    <div style="position: absolute; top: 0; left: 0; width: @(Width); height: @(Height);">
        <svg id="@SvgId" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="100%" height="100%">
            <defs>
                <clipPath id="@Context.clip_name">
                    <rect width="100%" height="100%" />
                </clipPath>
            </defs>
            @{
                CheckVisible();
            }
            @foreach (var obj in Objects)
            {
                @if (obj.visible)
                {
                    @((MarkupString)obj.GetSVG(this, Context))
                }
            }
        </svg>
    </div>
}
@code{
    [Parameter]
    public string SvgId { get; set; } = "bssvg";
    [Parameter]
    public string Width { get; set; } = "100%";
    [Parameter]
    public string Height { get; set; } = "100%";
    [Parameter]
    public List<SVGObject> Objects { get; set; }
    [Parameter]
    public SVGContext Context { get; set; }

    private IJSObjectReference? module;

    public static ObjectMapper<SVGObject> objectMapper = new ObjectMapper<SVGObject>();

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        try
        {
            if (module != null)
                await module.DisposeAsync();
            module = null;
        }
        catch { }
    }

    public async Task LoadJSModule()
    {
        if (module == null)
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/BlazorSimpleSVG/SimpleSVG.razor.js");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadJSModule();
            StateHasChanged();
        }
    }

    [JSInvokable("ImageLoaded")]
    public static Task ImageLoaded(string id, string data)
    {
        var instance = objectMapper.Get(id);
        if (instance != null)
        {
            instance.SetImageSize(data);
        }
        return Task.CompletedTask;
    }

    public void CheckVisible()
    {
        var objToCheck = Objects.Find(_ => _.scrollIntoView == true);
        if (objToCheck!=null && Context.IsValid())
        {
            Context.EnsureIsVisible(objToCheck.rect);
            objToCheck.scrollIntoView = false;
        }
    }
}