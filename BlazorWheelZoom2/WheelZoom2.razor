@using BlazorSimpleSVG
@using Microsoft.JSInterop
@using System.Threading;
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div @ref="divElement" style="position:relative;width:@Width;height:@Height;"
     @onpointerdown=PointerDown @onpointerdown:preventDefault @onpointerdown:stopPropagation
     @onpointerup=PointerUp @onpointerup:preventDefault @onpointerup:stopPropagation
     @oncontextmenu="()=> { }" @oncontextmenu:preventDefault
     @onpointermove=PointerMove @onpointermove:preventDefault
     @onwheel=Wheel @onwheel:stopPropagation @onwheel:preventDefault>

    @{ 
        Objects = new List<SVGObject>();
        if (Image != null)
            Objects.Add(Image);
        if (RectangleList != null)
            Objects.AddRange(RectangleList);
        if (drawingRect != null)
            Objects.Add(drawingRect);
    }
    <SimpleSVG SvgId="bwz" Objects="@Objects" Context="@Context" Width="100%" Height="100%" />
</div>

@code
{
    ElementReference divElement;

    [Parameter]
    public string ImageUri { get; set; }
    [Parameter]
    public string Width { get; set; } = "100px";
    [Parameter]
    public string Height { get; set; } = "100px";
    [Parameter]
    public EventCallback<SVGRectangle> NewRectangle { get; set; }
    [Parameter]
    public SVGRectangle NewRectangleTemplate { get; set; } = new SVGRectangle() { color = "red", fill = "lightgray", fill_opacity = "50%" };
    [Parameter]
    public List<SVGRectangle> RectangleList { get; set; }

    SVGContext Context = new SVGContext();
    List<SVGObject> Objects = new List<SVGObject>();
    SVGImage Image;
    SVGRectangle svgRect;
    SVGRectangle drawingRect;

    protected override void OnInitialized()
    {
        Context.zoom = 1; // The zoom must start at 1 so we can determine the image size
        Image = new SVGImage() { id = "img1", href = ImageUri };
        Objects.Add(Image);
        drawingRect = new SVGRectangle() { visible = false };
        Objects.Add(drawingRect);
    }

    private IJSObjectReference module;

    public void Refresh(string img)
    {
        ImageUri = img;
        svgRect = null;
        // Context.Reset();
        Image.href = ImageUri;
        // imageInfoUpdated = 2;
        StateHasChanged();
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module != null)
            await module.DisposeAsync();
        module = null;
    }

    public async Task LoadJSModule()
    {
        if (module == null)
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/BlazorWheelZoom2/scripts.js");
    }

    public async Task GetSizes()
    {
        if (svgRect == null)
        {
            await LoadJSModule();
            var image = await module.InvokeAsync<string>("GetBoundingClientRect", Image.id);
            var jimage = System.Text.Json.JsonDocument.Parse(image);
            // Always left=0, top=0 => adjust right and bottom
            Image.left = jimage.RootElement.GetProperty("left").GetDouble();
            Image.top = jimage.RootElement.GetProperty("top").GetDouble();
            Image.right = jimage.RootElement.GetProperty("right").GetDouble();
            Image.bottom = jimage.RootElement.GetProperty("bottom").GetDouble();
            Image.right = (Image.right - Image.left)/Context.zoom;
            Image.left = 0;
            Image.bottom = (Image.bottom - Image.top)/Context.zoom;
            Image.top = 0;
            Console.WriteLine($"Image size = {Image.left.ToStringInvariant()};{Image.top.ToStringInvariant()};{Image.right.ToStringInvariant()};{Image.bottom.ToStringInvariant()}");
            var svg = System.Text.Json.JsonDocument.Parse(await module.InvokeAsync<string>("GetBoundingClientRect", "bwz"));
            svgRect = new SVGRectangle()
            {
                left = svg.RootElement.GetProperty("left").GetDouble(),
                top = svg.RootElement.GetProperty("top").GetDouble(),
                right = svg.RootElement.GetProperty("right").GetDouble(),
                bottom = svg.RootElement.GetProperty("bottom").GetDouble()
            };
            Console.WriteLine($"SVG size = {svgRect.left.ToStringInvariant()};{svgRect.top.ToStringInvariant()};{svgRect.right.ToStringInvariant()};{svgRect.bottom.ToStringInvariant()}");
        }
    }

    async Task Wheel(WheelEventArgs e)
    {
        await GetSizes();
        if (e.DeltaY > 0)
            Context.zoom /= 1.1;
        else if (e.DeltaY < 0)
            Context.zoom *= 1.1;
        Context.zoom = Math.Max(0.1, Math.Min(10, Context.zoom));
        Context.x_offset = Context.Clip(Context.x_offset, (svgRect.right - svgRect.left) - Context.Size(Image.right - Image.left));
        Context.y_offset = Context.Clip(Context.y_offset, (svgRect.bottom - svgRect.top) - Context.Size(Image.bottom - Image.top));
        StateHasChanged();
    }

    long mouseDown = -1;
    double mouseDownX, mouseDownY;
    double mouseDownImageX, mouseDownImageY;

    async Task PointerDown(PointerEventArgs e)
    {
        await GetSizes();
        if (mouseDown == -1)
        {
            if (e.Button == 0 || e.Button == 2)
            {
                mouseDown = e.Button;
                mouseDownX = e.OffsetX;
                mouseDownY = e.OffsetY;
                mouseDownImageX = Context.x_offset;
                mouseDownImageY = Context.y_offset;
                await LoadJSModule();
                await module.InvokeVoidAsync("capturePointer", divElement, e.PointerId);
            }
            if (e.Button == 2)
            {
                drawingRect.left = Context.ScreenToViewX(e.OffsetX);
                drawingRect.top = Context.ScreenToViewY(e.OffsetY);
                drawingRect.right = drawingRect.left + 1;
                drawingRect.bottom = drawingRect.top + 1;
                drawingRect.color = NewRectangleTemplate.color;
                drawingRect.fill = NewRectangleTemplate.fill;
                drawingRect.fill_opacity = NewRectangleTemplate.fill_opacity;
                drawingRect.visible = true;

                StateHasChanged();
            }
        }
        else
            await PointerMove(e);
    }

    async Task PointerUp(PointerEventArgs e)
    {
        //Console.WriteLine("PointerUp {0}", System.Text.Json.JsonSerializer.Serialize(e));
        if (mouseDown == 2)
        {
            if (NewRectangle.HasDelegate)
                await NewRectangle.InvokeAsync(drawingRect);
            Objects.Remove(drawingRect);
            drawingRect = new SVGRectangle() { visible = false };
            Objects.Add(drawingRect);
        }
        mouseDown = -1;
        await LoadJSModule();
        await module.InvokeVoidAsync("releasePointer", divElement, e.PointerId);
    }

    async Task PointerMove(PointerEventArgs e)
    {
        await GetSizes();
        if (mouseDown == 0)
        {
            Context.x_offset = Context.Clip(mouseDownImageX + e.OffsetX - mouseDownX, (svgRect.right - svgRect.left) - Context.Size(Image.right - Image.left));
            Context.y_offset = Context.Clip(mouseDownImageY + e.OffsetY - mouseDownY, (svgRect.bottom - svgRect.top) - Context.Size(Image.bottom - Image.top));
        }
        else if (mouseDown == 2)
        {
            drawingRect.right = drawingRect.left + Context.ScreenToViewX(mouseDownImageX + e.OffsetX - mouseDownX);
            drawingRect.bottom = drawingRect.top + Context.ScreenToViewY(mouseDownImageY + e.OffsetY - mouseDownY);
            //Console.WriteLine("PointerMove {0};{1};{2}", e.OffsetX - mouseDownX, Context.ScreenToViewX(e.OffsetX - mouseDownX), drawingRect);
        }
        StateHasChanged();
    }

}